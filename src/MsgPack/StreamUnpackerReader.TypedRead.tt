<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file=".\UnpackerReader.TypedRead.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.IO;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file was generated from StreamUnpackerReader.TypedRead.tt and UnpackerReader.TypedRead.ttinclude T4Template.
	// Do not modify this file. Edit StreamUnpackerReader.TypedRead.tt and UnpackerReader.TypedRead.ttinclude instead.

	partial class StreamUnpackerReader
	{
<#
foreach ( var type in scalarTypes )
{
#>

		public override <#= type #> Read<#= type #>()
		{
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>
			var read = this.TryRead<#= type #>();
			if ( read < 0 )
			{
				this.ThrowEofException( sizeof( <#= primitiveNames[ type ] #> ) );
			}

			return unchecked( ( <#= primitiveNames[ type ] #> )( read ) );
<#
	}
	else
	{
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */true, /* isAsync */false );
	}
#>
		}
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>

		public override <#= lengthTypes[ type ] #> TryRead<#= type #>()
		{
<#
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */false, /* isAsync */false );
#>
		}
<#
	}
}
#>

#if FEATURE_TAP
<#
foreach ( var type in scalarTypes )
{
#>

		public override async Task<<#= type #>> Read<#= type #>Async( CancellationToken cancellationToken )
		{
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>
			var read = await this.TryRead<#= type #>Async( cancellationToken ).ConfigureAwait( false );
			if ( read < 0 )
			{
				this.ThrowEofException( sizeof( <#= primitiveNames[ type ] #> ) );
			}

			return unchecked( ( <#= primitiveNames[ type ] #> )( read ) );
<#
	}
	else
	{
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */true, /* isAsync */true );
	}
#>
		}
<#
	if ( lengthTypes.ContainsKey( type ) )
	{
#>

		public override async Task<<#= lengthTypes[ type ] #>> TryRead<#= type #>Async( CancellationToken cancellationToken )
		{
<#
		this.WriteStreamReaderReadBody( type, primitiveNames[ type ], /* isStrict */false, /* isAsync */true );
#>
		}
<#
	}
}
#>

#endif // FEATURE_TAP
	}
}
<#+
private void WriteStreamReaderReadBody( string type, string primitiveType, bool isStrict, bool isAsync )
{
	var methodCall = new StringBuilder();
	if ( isAsync )
	{
		methodCall.Append( "await ");
	}

	methodCall.Append( "this._source.Read" );

	if ( isAsync )
	{
		methodCall.Append( "Async");
	}

	methodCall.Append( "( this._scalarBuffer, totalRead, sizeof( " ).Append( primitiveType ).Append( " ) - totalRead" );

	if ( isAsync )
	{
		methodCall.Append( ", cancellationToken");
	}

	methodCall.Append( " )" );

	if ( isAsync )
	{
		methodCall.Append( ".ConfigureAwait( false )");
	}

#>
			this._lastOffset = this._offset;
			var totalRead = 0;
			var read = 0;
			// Retry for splitted stream like NetworkStream
			do
			{
				read = <#= methodCall #>;
				totalRead += read;
			} while ( read > 0 && totalRead < sizeof( <#= primitiveType #> ) );

			this._offset += totalRead;
			
			if ( totalRead == sizeof( <#= primitiveType #> ) )
			{
				return BigEndianBinary.To<#= type #>( this._scalarBuffer, 0 );
			}
			else
			{
<#+
	if ( isStrict )
	{
#>
				this.ThrowEofException( sizeof( <#= primitiveType #> ) );
				// never reaches
				return default( <#= primitiveType #> );
<#+
	}
	else
	{
#>
				return -1;
<#+
	}
#>
			}
<#+
} // WriteStreamReaderReadBody
#>