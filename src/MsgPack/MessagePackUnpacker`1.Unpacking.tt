<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ include file="..\Core.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2017 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if CORE_CLR || UNITY || NETSTANDARD1_1
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // CORE_CLR || UNITY || NETSTANDARD1_1
using System.Text;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file was generated from MessagePackUnpacker`1.Unpacking.tt and Core.ttinclude T4Template.
	// Do not modify this file. Edit MessagePackUnpacker`1.Unpacking.tt and Core.ttinclude instead.

	partial class MessagePackUnpacker<TReader>
	{
<#
foreach ( var isAsync in new [] { false, true } )
{
	var asyncPrefix = isAsync ? "result." : String.Empty;

	if ( !isAsync )
	{
#>
		private ReadValueResult ReadValue( out byte header, out long integral, out float real32, out double real64 )
		{
			var readHeader = this.Reader.TryReadByte();
<#
	}
	else
	{
#>
#if FEATURE_TAP

		private async Task<AsyncReadValueResult> ReadValueAsync( CancellationToken cancellationToken )
		{
			var readHeader = await this.Reader.TryReadByteAsync( cancellationToken ).ConfigureAwait( false );
<#
	}

	if ( !isAsync )
	{
#>
			// This is BAD practice for out, but it reduces IL size very well for this method.
			integral = default( long );
			real32 = default( float );
			real64 = default( double );
<#
	}
	else
	{
#>
			var result = default( AsyncReadValueResult );
<#
	}
#>

			if ( readHeader < 0 )
			{
<#
	if ( !isAsync )
	{
#>
				header = 0;
				return ReadValueResult.Eof;
<#
	}
	else
	{
#>
				return result;
<#
	}
#>
			}

<#
	if ( !isAsync )
	{
#>
			header = unchecked( ( byte )readHeader );
<#
	}
	else
	{
#>
			var header = unchecked( ( byte )readHeader );
			result.header = header;
<#
	}
#>

			switch ( header >> 4 )
			{
				case 0x0:
				case 0x1:
				case 0x2:
				case 0x3:
				case 0x4:
				case 0x5:
				case 0x6:
				case 0x7:
				{
					// PositiveFixNum
					this.CollectionType = CollectionType.None;
					<#= asyncPrefix #>integral = header;
<#
					ReturnValue( "Byte", isAsync );
#>
				}
				case 0x8:
				{
					// FixMap
					<#= asyncPrefix #>integral = header & 0xF;
<#
					ReturnValue( "MapLength", isAsync );
#>
				}
				case 0x9:
				{
					// FixArray
					<#= asyncPrefix #>integral = header & 0xF;
<#
					ReturnValue( "ArrayLength", isAsync );
#>
				}
				case 0xA:
				case 0xB:
				{
					// FixRaw
					<#= asyncPrefix #>integral = header & 0x1F;
<#
					ReturnValue( "String", isAsync );
#>
				}
				case 0xE:
				case 0xF:
				{
					// NegativeFixNum
					this.CollectionType = CollectionType.None;
					<#= asyncPrefix #>integral = header | unchecked( ( long )0xFFFFFFFFFFFFFF00 );
<#
					ReturnValue( "SByte", isAsync );
#>
				}
			}

			switch ( header )
			{
				case MessagePackCode.NilValue:
				{
<#
					ReturnValue( "Nil", isAsync );
#>
				}
				case MessagePackCode.TrueValue:
				{
					<#= asyncPrefix #>integral = 1;
<#
					ReturnValue( "Boolean", isAsync );
#>
				}
				case MessagePackCode.FalseValue:
				{
					<#= asyncPrefix #>integral = 0;
<#
					ReturnValue( "Boolean", isAsync );
#>
				}
				case MessagePackCode.SignedInt8:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "SByte", isAsync ) #>;
<#
					ReturnValue( "SByte", isAsync );
#>
				}
				case MessagePackCode.SignedInt16:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "Int16", isAsync ) #>;
<#
					ReturnValue( "Int16", isAsync );
#>
				}
				case MessagePackCode.SignedInt32:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "Int32", isAsync ) #>;
<#
					ReturnValue( "Int32", isAsync );
#>
				}
				case MessagePackCode.SignedInt64:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "Int64", isAsync ) #>;
<#
					ReturnValue( "Int64", isAsync );
#>
				}
				case MessagePackCode.UnsignedInt8:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "Byte", isAsync ) #>;
<#
					ReturnValue( "Byte", isAsync );
#>
				}
				case MessagePackCode.UnsignedInt16:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt16", isAsync ) #>;
<#
					ReturnValue( "UInt16", isAsync );
#>
				}
				case MessagePackCode.UnsignedInt32:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt32", isAsync ) #>;
<#
					ReturnValue( "UInt32", isAsync );
#>
				}
				case MessagePackCode.UnsignedInt64:
				{
					<#= asyncPrefix #>integral = unchecked( ( long )<#= ReadScalarStrict( "UInt64", isAsync ) #> );
<#
					ReturnValue( "UInt64", isAsync );
#>
				}
				case MessagePackCode.Real32:
				{
					<#= asyncPrefix #>real32 = <#= ReadScalarStrict( "Single", isAsync ) #>;
<#
					ReturnValue( "Single", isAsync );
#>
				}
				case MessagePackCode.Real64:
				{
					<#= asyncPrefix #>real64 = <#= ReadScalarStrict( "Double", isAsync ) #>;
<#
					ReturnValue( "Double", isAsync );
#>
				}
				case MessagePackCode.Bin8:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "Byte", isAsync ) #>;
<#
					ReturnValue( "Binary", isAsync );
#>
				}
				case MessagePackCode.Str8:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "Byte", isAsync ) #>;
<#
					ReturnValue( "String", isAsync );
#>
				}
				case MessagePackCode.Bin16:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt16", isAsync ) #>;
<#
					ReturnValue( "Binary", isAsync );
#>
				}
				case MessagePackCode.Raw16:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt16", isAsync ) #>;
<#
					ReturnValue( "String", isAsync );
#>
				}
				case MessagePackCode.Bin32:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt32", isAsync ) #>;
<#
					ReturnValue( "Binary", isAsync );
#>
				}
				case MessagePackCode.Raw32:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt32", isAsync ) #>;
<#
					ReturnValue( "String", isAsync );
#>
				}
				case MessagePackCode.Array16:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt16", isAsync ) #>;
<#
					ReturnValue( "ArrayLength", isAsync );
#>
				}
				case MessagePackCode.Array32:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt32", isAsync ) #>;
<#
					ReturnValue( "ArrayLength", isAsync );
#>
				}
				case MessagePackCode.Map16:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt16", isAsync ) #>;
<#
					ReturnValue( "MapLength", isAsync );
#>
				}
				case MessagePackCode.Map32:
				{
					<#= asyncPrefix #>integral = <#= ReadScalarStrict( "UInt32", isAsync ) #>;
<#
					ReturnValue( "MapLength", isAsync );
#>
				}
				case MessagePackCode.FixExt1:
				{
<#
					ReturnValue( "FixExt1", isAsync );
#>
				}
				case MessagePackCode.FixExt2:
				{
<#
					ReturnValue( "FixExt2", isAsync );
#>
				}
				case MessagePackCode.FixExt4:
				{
<#
					ReturnValue( "FixExt4", isAsync );
#>
				}
				case MessagePackCode.FixExt8:
				{
<#
					ReturnValue( "FixExt8", isAsync );
#>
				}
				case MessagePackCode.FixExt16:
				{
<#
					ReturnValue( "FixExt16", isAsync );
#>
				}
				case MessagePackCode.Ext8:
				{
<#
					ReturnValue( "Ext8", isAsync );
#>
				}
				case MessagePackCode.Ext16:
				{
<#
					ReturnValue( "Ext16", isAsync );
#>
				}
				case MessagePackCode.Ext32:
				{
<#
					ReturnValue( "Ext32", isAsync );
#>
				}
				default:
				{
					this.ThrowUnassignedMessageTypeException( readHeader );
					// Never reach
<#
					ReturnValue( "Eof", isAsync );
#>
				}
			}
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP
<#
	}
} // foreach
#>

		private long ReadArrayLengthCore( long length )
		{
			this.CollectionType = CollectionType.Array;
			this.ItemsCount = unchecked( ( uint )length );
			this.Data = unchecked( ( uint )length );
			return length;
		}

		private long ReadMapLengthCore( long length )
		{
			this.CollectionType = CollectionType.Map;
			this.ItemsCount = unchecked( ( uint )length );
			this.Data = unchecked( ( uint )length );
			return length;
		}

<#
foreach ( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}
#>
		private <#= AsyncReturnValue( "byte[]", isAsync ) #> ReadBinary<#= AsyncSuffix( isAsync ) #>Core( long length<#= Parameter( isAsync ) #> )
		{
			if ( length == 0 )
			{
				this.CollectionType = CollectionType.None;
				return Binary.Empty;
			}

			this.CheckLength( length, ReadValueResult.Binary );
			var buffer = new byte[ length ];
			<#= Await( isAsync, "this.Reader.Read" + AsyncSuffix( isAsync ) + "( buffer, buffer.Length" + LastArgument( isAsync ) + " )" ) #>;
			this.CollectionType = CollectionType.None;
			return buffer;
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP
<#
	}
}
#>

<#
foreach ( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}
#>
		private <#= AsyncReturnValue( "string", isAsync ) #> ReadString<#= AsyncSuffix( isAsync ) #>Core( long length<#= Parameter( isAsync ) #> )
		{
			if ( length == 0 )
			{
				this.CollectionType = CollectionType.None;
				return String.Empty;
			}

			this.CheckLength( length, ReadValueResult.String );

			var result = <#= Await( isAsync, "this.Reader.ReadString" + AsyncSuffix( isAsync ) + "( unchecked( ( int )length )" + LastArgument( isAsync ) + " )" ) #>;
			this.CollectionType = CollectionType.None;
			return result;
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP

<#
	}
} // foreach

foreach ( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}
#>
		private <#= AsyncReturnValue( "MessagePackExtendedTypeObject", isAsync ) #> ReadMessagePackExtendedTypeObject<#= AsyncSuffix( isAsync ) #>Core( ReadValueResult type<#= Parameter( isAsync ) #> )
		{
			uint length;
			switch ( ( uint )( type & ReadValueResult.VariableLengthMask ) )
			{
				case 0x20: // 001-00000
				{
					length = <#= ReadScalarStrict( "Byte", isAsync ) #>;
					break;
				}
				case 0x40: // 010-00000
				{
					length = <#= ReadScalarStrict( "UInt16", isAsync ) #>;
					break;
				}
				case 0x80: // 100-00000
				{
					length = <#= ReadScalarStrict( "UInt32", isAsync ) #>;
					break;
				}
				default: // 000-xxxxx
				{
#if DEBUG
					Contract.Assert( ( uint )( type & ReadValueResult.VariableLengthMask ) == 0, ( uint )( type & ReadValueResult.VariableLengthMask ) + " == 0" );
#endif // DEBUG
					length = ( uint )( type & ReadValueResult.FixedLengthMask );
					break;
				}
			}

			var	typeCode = <#= ReadScalarStrict( "Byte", isAsync ) #>;
			var data = new byte[ length ];
<#
	if ( !isAsync )
	{
#>
			this.Reader.Read( data, data.Length );
<#
	}
	else
	{
#>
			await this.Reader.ReadAsync( data, data.Length, cancellationToken ).ConfigureAwait( false );
<#
	}
#>
			this.CollectionType = CollectionType.None;
			return new MessagePackExtendedTypeObject( typeCode, data );
		}

<#
	if ( isAsync )
	{
#>
#endif // FEATURE_TAP

<#
	}
} // foreach
#>
	}
}
<#+

private static string ReadScalarStrict( string type, bool isAsync )
{
	return isAsync ? ( "await this.Reader.Read" + type + "Async( cancellationToken ).ConfigureAwait( false )" ) : ( "this.Reader.Read" + type + "()" );
}


private void ReturnValue( string type, bool isAsync )
{
	if( !isAsync )
	{
#>
					return ReadValueResult.<#= type #>;
<#+
	}
	else
	{
#>
					result.type = ReadValueResult.<#= type #>;
					return result;
<#+
	}
}

private static string Await( bool isAsync, string expression )
{
	return ( isAsync ? "await ": String.Empty ) + expression + ( isAsync ? ".ConfigureAwait( false )" : String.Empty );
}

private static string AsyncSuffix( bool isAsync )
{
	return isAsync ? "Async": String.Empty;
}

private static string AsyncReturnValue( string type, bool isAsync )
{
	return ( isAsync ? "async Task<" : String.Empty ) + type + ( isAsync ? ">" : String.Empty );
}

private static string Parameter( bool isAsync )
{
	return isAsync ? ", CancellationToken cancellationToken" : String.Empty;
}

private static string LastArgument( bool isAsync )
{
	return isAsync ? ", cancellationToken" : String.Empty;
}

private static string Argument( bool isAsync )
{
	return isAsync ? " cancellationToken " : String.Empty;
}
#>